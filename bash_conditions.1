.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "BASH_CONDITIONS" "1" "September 2011" "" ""
.
.SH "NAME"
\fBbash_conditions\fR
.
.P
bash(1) \-\- Conditional statments
.
.P
Built in variables: $1\-$N Stores the arguments (variables) that were passed to the shell program from the command line\. $? Stores the exit value of the last command that was executed\. $0 Stores the first word of the entered command (the name of the shell program)\. $* Stores all the arguments that were entered on the command line ($1 $2 \.\.\.)\. "$@" Stores all the arguments that were entered on the command line, individually quoted ("$1" "$2" \.\.\.)\.
.
.P
A command called test is used to evaluate conditional expressions, such as a if\-then statement that checks the entrance/exit criteria for a loop\.
.
.P
test expression Or [ expression ]
.
.P
Numeric Comparisons
.
.P
int1 \-eq int2 Returns True if int1 is equal to int2\. int1 \-ge int2 Returns True if int1 is greater than or equal to int2\. int1 \-gt int2 Returns True if int1 is greater than int2\. int1 \-le int2 Returns True if int1 is less than or equal to int2 int1 \-lt int2 Returns True if int1 is less than int2 int1 \-ne int2 Returns True if int1 is not equal to int2
.
.P
String Comparisons
.
.P
str1 = str2 Returns True if str1 is identical to str2\. str1 != str2 Returns True if str1 is not identical to str2\. str Returns True if str is not null\. \-n str Returns True if the length of str is greater than zero\. \-z str Returns True if the length of str is equal to zero\. (zero is different than null)
.
.P
File Comparisons
.
.P
\-d filename Returns True if file, filename is a directory\. \-f filename Returns True if file, filename is an ordinary file\. \-r filename Returns True if file, filename can be read by the process\. \-s filename Returns True if file, filename has a nonzero length\. \-w filename Returns True if file, filename can be written by the process\. \-x filename Returns True if file, filename is executable\.
.
.P
Expression Comparisons
.
.P
!expression
.
.P
Returns true if expression is not true expr1 \-a expr2
.
.P
Returns True if expr1 and expr2 are true\. ( && , and ) expr1 \-o expr2
.
.P
Returns True if expr1 or expr2 is true\. ( , or )
.
.P
Logic Con\'t\.
.
.P
If\.\.\.then
.
.P
if [ expression ] then commands fi
.
.P
If\.\.then\.\.\.else
.
.P
if [ expression ] then commands else commands fi
.
.P
If\.\.then\.\.\.else If\.\.\.else
.
.P
if [ expression ] then commands elif [ expression2 ] then commands else commands fi
.
.P
Case select
.
.P
case string1 in str1) commands;; str2) commands;; *) commands;; esac
.
.P
string1 is compared to str1 and str2\. If one of these strings matches string1, the commands up until the double semicolon (; ;) are executed\. If neither str1 nor str2 matches string1, the commands associated with the asterisk are executed\. This is the default case condition because the asterisk matches all strings\.
.
.P
Iteration (Loops)
.
.P
for var1 in list do commands done
.
.P
This executes once for each item in the list\. This list can be a variable that contains several words separated by spaces (such as output from ls or cat), or it can be a list of values that is typed directly into the statement\. Each time through the loop, the variable var1 is assigned the current item in the list, until the last one is reached\.
.
.P
while [ expression ] do commands done
.
.P
until [ expression ] do commands done
.
.P
Functions
.
.P
Create a function:
.
.P
fname(){ commands }
.
.P
Call it by using the following syntax: fname
.
.P
Or, create a function that accepts arguments:
.
.P
fname2 (arg1,arg2\.\.\.argN){ commands }
.
.P
And call it with: fname2 arg1 arg2 \.\.\. argN
.
.SH "LINKS"
\fIhttp://www\.linuxtutorialblog\.com/post/tutorial\-conditions\-in\-bash\-scripting\-if\-statements\fR
