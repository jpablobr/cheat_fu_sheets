Ruby Autotest
=============

## Rails:

Gemfile:
group :test do
  # Pretty printed test output
  gem 'turn', :require => false
  gem 'ZenTest'
  gem 'autotest-rails'
end

$ rake db:create:all
$ rake db:test:prepare
$ bundle exec autotest

## Plugins:

Plugins are available by creating a .autotest file either in your
project root or in your home directory. You can then write event
handlers in the form of:<br>

  'Autotest.add_hook hook_name { |autotest| ... }'

The available hooks are: initialize, run, run_command, ran_command,<br>

  `red, green, all_good, reset, interrupt, and quit.`

See example_dot_autotest.rb for more details.<br>

## Naming:

Autotest uses a simple naming scheme to figure out how to map implementation files to test files following the Test::Unit naming scheme.

    * Test files must be stored in test/
    * Test files names must start with test_
    * Test class names must start with Test
    * Implementation files must be stored in lib/
    * Implementation files must match up with a test file named test_.*implementation.rb

## Strategy:

     1. Find all files and associate them from impl <-> test.
     2. Run all tests.
     3. Scan for failures.
     4. Detect changes in ANY (ruby?. file, rerun all failures + changed files.
     5. Until 0 defects, goto 3.
     6. When 0 defects, goto 2.

## Exclusions:

    Autotest.add_hook :initialize do |at|
      at.add_exception(coverage)
      at.add_exception(vendor)
    end

## .autotest examples
by default autotest greps for test* instead of the most common *test.rb.
Therefore, one migth need to remap the greps.

  Autotest.add_hook :initialize do |at|
    at.clear_mappings

    at.add_mapping(%r{^test/.*_test\.rb$})              {|f, _| [f] }
    at.add_mapping(%r{^lib/factory_girl/(.*)\.rb$})     {|_, m| ["test/#{m[1]}_test.rb",
                                                                 "test/integration_test.rb"] }
    at.add_mapping(%r{^test/(test_helper|models)\.rb$}) { at.files_matching %r{^test/.*_test\.rb$} }
    at.add_mapping(%r{^lib/.*\.rb$})                    { at.files_matching %r{^test/.*_test\.rb$} }
  end
