delayed job collectiveidea(1) -- cheat sheet
============================================

## Installation

To install, add delayed_job to your Gemfile and run `bundle install`:

    gem 'delayed_job', :git => 'https://github.com/collectiveidea/delayed_job.git'

After delayed_job is installed, you will need to setup the backend.

## Backends

delayed_job supports multiple backends for storing the job queue. See the wiki for other backends besides Active Record.

The default is Active Record, which requires a jobs table.

    script/rails generate delayed_job
    rake db:migrate

## without delayed_job

@user.activate!(@device)

## with delayed_job

@user.delay.activate!(@device)


If a method should always be run in the background, you can call
@#handle_asynchronously@ after the method declaration:

    class Device
      def deliver
        # long running method
      end
      handle_asynchronously :deliver
    end

    device = Device.new
    device.deliver

handle_asynchronously can take as options anything you can pass to
delay. In addition the values can be Proc objects allowing call time
evaluation of the value. For some examples:

    class LongTasks
      def send_mailer
        # Some other code
      end
      handle_asynchronously :send_mailer, :priority => 20

      def in_the_future
        # Some other code
      end
      # 5.minutes.from_now will be evaluated when in_the_future is called
      handle_asynchronously :in_the_future, :run_at => Proc.new { 5.minutes.from_now }

      def self.when_to_run
        2.hours.from_now
      end

      def call_a_class_method
        # Some other code
      end
      handle_asynchronously :call_a_class_method, :run_at => Proc.new { when_to_run }

      attr_reader :how_important

      def call_an_instance_method
        # Some other code
      end
      handle_asynchronously :call_an_instance_method, :priority => Proc.new {|i| i.how_important }
    end

## Running Jobs

@script/delayed_job@ can be used to manage a background process which
will start working off jobs.  Make sure you've run `script/generate
delayed_job`.

    RAILS_ENV=production script/delayed_job start
    RAILS_ENV=production script/delayed_job stop

    Runs two workers in separate processes.
    RAILS_ENV=production script/delayed_job -n 2 start
    RAILS_ENV=production script/delayed_job stop

Workers can be running on any computer, as long as they have access to
the database and their clock is in sync. Keep in mind that each worker
will check the database at least every 5 seconds.

You can also invoke @rake jobs:work@ which will start working off
jobs. You can cancel the rake task with @CTRL-C@.

## Custom Jobs

Jobs are simple ruby objects with a method called perform. Any object
which responds to perform can be stuffed into the jobs table. Job
objects are serialized to yaml so that they can later be resurrected by
the job runner.

    class NewsletterJob < Struct.new(:text, :emails)
      def perform
        emails.each { |e| NewsletterMailer.deliver_text_to_email(text, e) }
      end
    end

    Delayed::Job.enqueue NewsletterJob.new('lorem ipsum...', Customers.find(:all).collect(&:email))

## Hooks

You can define hooks on your job that will be called at different stages in the process:

    class ParanoidNewsletterJob < NewsletterJob
      def enqueue(job)
        record_stat 'newsletter_job/enqueue'
      end

      def perform
        emails.each { |e| NewsletterMailer.deliver_text_to_email(text, e) }
      end

      def before(job)
        record_stat 'newsletter_job/start'
      end

      def after(job)
        record_stat 'newsletter_job/after'
      end

      def success(job)
        record_stat 'newsletter_job/success'
      end

      def error(job, exception)
        notify_hoptoad(exception)
      end

      def failure
        page_sysadmin_in_the_middle_of_the_night
      end
    end

## Gory Details

The library evolves around a delayed_jobs table which looks as follows:

    create_table :delayed_jobs, :force => true do |table|
      table.integer  :priority, :default => 0      # Allows some jobs to jump to the front of the queue
      table.integer  :attempts, :default => 0      # Provides for retries, but still fail eventually.
      table.text     :handler                      # YAML-encoded string of the object that will do work
      table.text   :last_error                   # reason for last failure (See Note below)
      table.datetime :run_at                       # When to run. Could be Time.zone.now for immediately, or sometime in the future.
      table.datetime :locked_at                    # Set when a client is working on this object
      table.datetime :failed_at                    # Set when all retries have failed (actually, by default, the record is deleted instead)
      table.string   :locked_by                    # Who is working on this object (if locked)
      table.timestamps
    end

It is possible to disable delayed jobs for testing purposes. Set
Delayed::Worker.delay_jobs = false to execute all jobs realtime.

Here is an example of changing job parameters in Rails:

    # config/initializers/delayed_job_config.rb
    Delayed::Worker.destroy_failed_jobs = false
    Delayed::Worker.sleep_delay = 60
    Delayed::Worker.max_attempts = 3
    Delayed::Worker.max_run_time = 5.minutes
    Delayed::Worker.delay_jobs = !Rails.env.test?

## Cleaning up

You can invoke @rake jobs:clear@ to delete all jobs in the queue.

## Basic test

    gem 'delayed_job', :git => 'https://github.com/collectiveidea/delayed_job.git'

    class Page < ActiveRecord::Base
      def puts_test
        puts '>>>>>>>>>>>>>>>>testing delayed job<<<<<<<<<<<<<<<'
      end
      handle_asynchronously :puts_test, :run_at => Proc.new { 1.minutes.from_now }
    end

    class PagesController < ApplicationController
      def show
        @page = Page.find(params[:id]
        @page.puts_test
      end
    end

run in the terminal:

    rake jobs:work
    rails s
    rails c
    Delayed::Job

load a page!

## LINKS
<https://github.com/collectiveidea/delayed_job>
