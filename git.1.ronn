Git(1) -- Cheats
================

## Setup

Add "--global" after "git config" to make it global to all git repos (writes to ~/.gitconfig).

## Add colors to your ~/.gitconfig file:

    [color]
      ui = auto
    [color "branch"]
      current = yellow reverse
      local = yellow
      remote = green
    [color "diff"]
      meta = yellow bold
      frag = magenta bold
      old = red bold
      new = green bold
    [color "status"]
      added = yellow
      changed = green
      untracked = cyan

## Highlight whitespace in diffs

    [color]
      ui = true
    [color "diff"]
      whitespace = red reverse
    [core]
      whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol

## Add aliases to your ~/.gitconfig file:

    [alias]
      st = status
      ci = commit
      br = branch
      co = checkout
      df = diff
      lg = log -p
      lol = log --graph --decorate --pretty=oneline --abbrev-commit
      lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
      ls = ls-files

## Configuration:

## edit the .git/config [or ~/.gitconfig] file in your $EDITOR
    git config -e [--global]

##  sets your name and email for commit messages
    git config --global user.name 'John Doe'
    git config --global user.email johndoe@example.com

## Setup new branches so that git-pull(1)
    git config branch.autosetupmerge true

Will appropriately merge from that remote branch.  Recommended.  Without this,
you will have to add `--track` to your branch command or manually merge remote
tracking branches with "fetch" and then "merge".

## Convert the newlines to the system’s standard
    git config core.autocrlf true

## OPTIONS

Helpful options.

`git reflog`:

Use this to recover from *major* fuck ups! It's basically a log of the
last few actions and you might have luck and find old commits that
have been lost by doing a complex merge.

`git diff`:

Show a diff of the changes made since your last commit
to diff one file: "git diff -- <filename>"
to show a diff between staging area and HEAD: `git diff --cached`

`git status`:

show files added to the staging area, files with changes, and untracked files

`git log`:

show recent commits, most recent on top. Useful options:
--color       with color
--graph       with an ASCII-art commit graph on the left
--decorate    with branch and tag names on appropriate commits
--stat        with stats (files changed, insertions, and deletions)
-p            with full diffs
--author=foo  only by a certain author
--after="MMM DD YYYY" ex. ("Jun 20 2008") only commits after a certain date
--before="MMM DD YYYY" only commits that occur before a certain date
--merge       only the commits involved in the current merge conflicts

`git log <ref>..<ref>`:

Show commits between the specified range. Useful for seeing changes from remotes:

`git log HEAD..origin/master`: # after git remote update

`git show <rev>`:

show the changeset (diff) of a commit specified by <rev>, which can be any
SHA1 commit ID, branch name, or tag (shows the last commit (HEAD) by default)

`git show --name-only <rev>`:

show only the names of the files that changed, no diff information.

`git blame <file>`:

show who authored each line in <file>

`git blame <file> <rev>`:

show who authored each line in <file> as of <rev> (allows blame to go back in
time)

`git gui blame`:

really nice GUI interface to git blame

`git whatchanged <file>`:

show only the commits which affected <file> listing the most recent first
E.g. view all changes made to a file on a branch:
  git whatchanged <branch> <file>  | grep commit |  colrm 1 7 | xargs -I % git show % <file>
this could be combined with git remote show <remote> to find all changes on
all branches to a particular file.

`git diff <commit> head path/to/fubar`:

show the diff between a file on the current branch and potentially another
branch

`git diff head -- <file>`:

use this form when doing git diff on cherry-pick'ed (but not committed)
changes
somehow changes are not shown when using just git diff.

`git ls-files`:

list all files in the index and under version control.

`git ls-remote <remote> [HEAD]`:

show the current version on the remote repo. This can be used to check whether
a local is required by comparing the local head revision.

## Adding / Deleting

`git add <file1> <file2> ...`

add <file1>, <file2>, etc... to the project

`git add <dir>`

add all files under directory <dir> to the project, including subdirectories

`git add .`

add all files under the current directory to the project
*WARNING*: including untracked files.

`git rm <file1> <file2> ...`

remove <file1>, <file2>, etc... from the project

`git rm $(git ls-files --deleted)`

remove all deleted files from the project

`git rm --cached <file1> <file2> ...`

commits absence of <file1>, <file2>, etc... from the project

## Ignoring

`Edit $GIT_DIR/info/exclude.`

See Environment Variables below for explanation on `$GIT_DIR.`

Add a file .gitignore to the root of your project. This file will be checked in.
Either way you need to add patterns to exclude to these files.

## Staging

`git add <file1> <file2> ...`

`git stage <file1> <file2> ...`

add changes in <file1>, <file2> ... to the staging area (to be included in
the next commit

`git add -p`

`git stage --patch`

interactively walk through the current changes (hunks) in the working
tree, and decide which changes to add to the staging area.

`git add -i`

`git stage --interactive`

interactively add files/changes to the staging area. For a simpler
mode (no menu), try `git add --patch` (above)

## Unstaging

`git reset HEAD <file1> <file2> ...`

remove the specified files from the next commit

## Committing

`git commit <file1> <file2> ... [-m <msg>]`

commit <file1>, <file2>, etc..., optionally using commit message <msg>,
otherwise opening your editor to let you type a commit message

`git commit -a`

commit all files changed since your last commit
(does not include new (untracked) files)

`git commit -v`

commit verbosely, i.e. includes the diff of the contents being committed in
the commit message screen

`git commit --amend`

edit the commit message of the most recent commit

`git commit --amend <file1> <file2> ...`

redo previous commit, including changes made to <file1>, <file2>, etc...

## Branching

`git branch`

list all local branches

`git branch -r`

list all remote branches

`git branch -a`

list all local and remote branches

`git branch <branch>`

create a new branch named <branch>, referencing the same point in history as
the current branch

`git branch <branch> <start-point>`
create a new branch named <branch>, referencing <start-point>, which may be
specified any way you like, including using a branch name or a tag name

`git push <repo> <start-point>:refs/heads/<branch>`

create a new remote branch named <branch>, referencing <start-point> on the
remote.
Example: git push origin origin:refs/heads/branch-1
Example: git push origin origin/branch-1:refs/heads/branch-2

`git branch --track <branch> <remote-branch>`

create a tracking branch. Will push/pull changes to/from another repository.
Example: git branch --track experimental origin/experimental

`git branch -d <branch>`

delete the branch <branch>; if the branch you are deleting points to a
commit which is not reachable from the current branch, this command
will fail with a warning.

`git branch -r -d <remote-branch>`

delete a remote-tracking branch.
Example: git branch -r -d wycats/master

`git branch -D <branch>`

even if the branch points to a commit not reachable from the current branch,
you may know that that commit is still reachable from some other branch or
tag. In that case it is safe to use this command to force git to delete the
branch.

`git checkout <branch>`

make the current branch <branch>, updating the working directory to reflect
the version referenced by <branch>

`git checkout -b <new> <start-point>`

create a new branch <new> referencing <start-point>, and check it out.

`git push <repository> :<branch>`

removes a branch from a remote repository.
Example: git push origin :old_branch_to_be_deleted

`git co <branch> <path to new file>`

Checkout a file from another branch and add it to this branch. File
will still need to be added to the git branch, but it's present.
Eg. git co remote_at_origin__tick702_antifraud_blocking
..../...nt_elements_for_iframe_blocked_page.rb

`git show <branch> -- <path to file that does not exist>`

Eg. git show remote_tick702 -- path/to/fubar.txt
show the contents of a file that was created on another branch and that
does not exist on the current branch.

`git show <rev>:<repo path to file>`

Show the contents of a file at the specific revision. Note: path has to be
absolute within the repo.

## Merging

`git merge <branch>`

merge branch <branch> into the current branch; this command is idempotent
and can be run as many times as needed to keep the current branch
up-to-date with changes in <branch>

`git merge <branch> --no-commit`

merge branch <branch> into the current branch, but do not autocommit the
result; allows you to make further tweaks

`git merge <branch> -s ours`

merge branch <branch> into the current branch, but drops any changes in
<branch>, using the current tree as the new tree

## Cherry-Picking

`git cherry-pick [--edit] [-n] [-m parent-number] [-s] [-x] <commit>`

selectively merge a single commit from another local branch
Example: git cherry-pick 7300a6130d9447e18a931e898b64eefedea19544

## Squashing

WARNING: "git rebase" changes history. Be careful. Google it.

`git rebase --interactive HEAD~10`

(then change all but the first "pick" to "squash")
squash the last 10 commits into one big commit


## Conflicts

`git mergetool`

work through conflicted files by opening them in your mergetool (opendiff,
kdiff3, etc.) and choosing left/right chunks. The merged result is staged for
commit.

For binary files or if mergetool won't do, resolve the conflict(s) manually
and then do:

`git add <file1> [<file2> ...]`

Once all conflicts are resolved and staged, commit the pending merge with:

`git commit`

## Sharing

`git fetch <remote>`

update the remote-tracking branches for <remote> (defaults to "origin").
 Does not initiate a merge into the current branch (see "git pull" below).

`git pull`

fetch changes from the server, and merge them into the current branch.
Note: .git/config must have a [branch "some_name"] section for the current
branch, to know which remote-tracking branch to merge into the current
branch.  Git 1.5.3 and above adds this automatically.

`git push`

update the server with your commits across all branches that are *COMMON*
between your local copy and the server.  Local branches that were never
pushed to the server in the first place are not shared.

`git push origin <branch>`

update the server with your commits made to <branch> since your last push.
This is always *required* for new branches that you wish to share. After
the first explicit push, "git push" by itself is sufficient.

`git push origin <branch>:refs/heads/<branch>`

E.g. git push origin twitter-experiment:refs/heads/twitter-experiment
Which, in fact, is the same as git push origin <branch> but a little
more obvious what is happening.

## Reverting

`git revert <rev>`

reverse commit specified by <rev> and commit the result.  This does *not* do
the same thing as similarly named commands in other VCS's such as "svn
revert" or "bzr revert", see below

`git checkout <file>`

re-checkout <file>, overwriting any local changes

`git checkout .`

re-checkout all files, overwriting any local changes.  This is most similar
to "svn revert" if you're used to Subversion commands

## Fix mistakes / Undo

`git reset --hard`

abandon everything since your last commit; this command can be DANGEROUS.
If merging has resulted in conflicts and you'd like to just forget about
the merge, this command will do that.

`git reset --hard ORIG_HEAD`

undo your most recent *successful* merge *and* any changes that occurred
after.  Useful for forgetting about the merge you just did.  If there are
conflicts (the merge was not successful), use "git reset --hard" (above)
instead.

`git reset --soft HEAD^`

forgot something in your last commit? That's easy to fix. Undo your last
commit, but keep the changes in the staging area for editing.

`git commit --amend`

redo previous commit, including changes you've staged in the meantime.
Also used to edit commit message of previous commit.

## Plumbing

`test <sha1-A> = $(git merge-base <sha1-A> <sha1-B>)`

determine if merging sha1-B into sha1-A is achievable as a fast forward;
non-zero exit status is false.

## Stashing

`git stash`

`git stash save <optional-name>`

save your local modifications to a new stash (so you can for example
"git svn rebase" or "git pull")

`git stash apply`

restore the changes recorded in the stash on top of the current working tree
state

`git stash pop`

restore the changes from the most recent stash, and remove it from the stack
of stashed changes

'git stash list'

list all current stashes

`git stash show <stash-name> -p`

show the contents of a stash - accepts all diff args

`git stash drop [<stash-name>]`

delete the stash

`git stash clear`

delete all current stashes

## Remotes

`git remote add <remote> <remote_URL>`

adds a remote repository to your git config.  Can be then fetched locally.
    Example:
      git remote add coreteam git://github.com/wycats/merb-plugins.git
      git fetch coreteam

`git push <remote> :refs/heads/<branch>`

delete a branch in a remote repository

`git push <remote> <remote>:refs/heads/<remote_branch>`

create a branch on a remote repository
Example: git push origin origin:refs/heads/new_feature_name

`git push <repository> +<remote>:<new_remote>`

replace a <remote> branch with <new_remote>
think twice before do this
Example: git push origin +master:my_branch

`git remote prune <remote>`

prune deleted remote-tracking branches from "git branch -r" listing

`git remote add -t master -m master origin git://example.com/git.git/`

add a remote and track its master

`git remote show <remote>`

show information about the remote server.

`git checkout -b <local branch> <remote>/<remote branch>`

Eg git checkout -b myfeature origin/myfeature
Track a remote branch as a local branch.

`git pull <remote> <branch>`

git push
For branches that are remotely tracked (via git push) but
that complain about non-fast forward commits when doing a
git push. The pull synchronizes local and remote, and if
all goes well, the result is pushable.

`git fetch <remote>`

Retrieves all branches from the remote repository. After
this 'git branch --track ...' can be used to track a branch
from the new remote.

## Submodules

`git submodule add <remote_repository> <path/to/submodule>`

add the given repository at the given path. The addition will be part of the
next commit.

`git submodule update [--init]`

Update the registered submodules (clone missing submodules, and checkout
the commit specified by the super-repo). --init is needed the first time.

`git submodule foreach <command>`
Executes the given command within each checked out submodule.

## Removing submodules

   1. Delete the relevant line from the .gitmodules file.

   2. Delete the relevant section from .git/config.

   3. Run git rm --cached path_to_submodule (no trailing slash).

   4. Commit and delete the now untracked submodule files.

Updating submodules
  To update a submodule to a new commit:
    1. update submodule:
        cd <path to submodule>
        git pull
    2. commit the new version of submodule:
        cd <path to toplevel>
        git commit -m "update submodule version"
    3. check that the submodule has the correct version
        git submodule status
  If the update in the submodule is not committed in the
  main repository, it is lost and doing git submodule
  update will revert to the previous version.

## Patches

`git format-patch HEAD^`

Generate the last commit as a patch that can be applied on another
clone (or branch) using 'git am'. Format patch can also generate a
patch for all commits using 'git format-patch HEAD^ HEAD'
All page files will be enumerated with a prefix, e.g. 0001 is the
first patch.

`git format-patch <Revision>^..<Revision>`

Generate a patch for a single commit. E.g.
git format-patch d8efce43099^..d8efce43099
Revision does not need to be fully specified.

`git am <patch file>`
Applies the patch file generated by format-patch.

`git diff --no-prefix > patchfile`
Generates a patch file that can be applied using patch:
patch -p0 < patchfile
Useful for sharing changes without generating a git commit.

## Tags

`git tag -l`

Will list all tags defined in the repository.

`git co <tag_name>`

Will checkout the code for a particular tag. After this you'll
probably want to do: 'git co -b <some branch name>' to define
a branch. Any changes you now make can be committed to that
branch and later merged.

## Git Instaweb

git instaweb --httpd=webrick [--start | --stop | --restart]

## Environment Variables

`GIT_AUTHOR_NAME`, `GIT_COMMITTER_NAME`

Your full name to be recorded in any newly created commits.  Overrides
user.name in .git/config

`GIT_AUTHOR_EMAIL`, `GIT_COMMITTER_EMAIL`

Your email address to be recorded in any newly created commits.  Overrides
user.email in .git/config

`GIT_DIR`

Location of the repository to use (for out of working directory repositories)

`GIT_WORKING_TREE`

Location of the Working Directory - use with GIT_DIR to specifiy the working
directory root
or to work without being in the working directory at all.

## Forked Repos

git clone git@github.com:username/Spoon-Knife.git
cd Spoon-Knife
git remote add upstream git://github.com/octocat/Spoon-Knife.git
git fetch upstream
git fetch upstream
git merge upstream/master

Show branches, tags in git log

$ git log --oneline --decorate
    7466000 (HEAD, mislav/master, mislav) fix test that fails if current dir is not "hub"
    494a414 fix cherry-pick of a commit URL
    4277848 (origin/master, origin/HEAD, master) whoops
    d270fae bugfix: git init -g
    9307af3 test deps
    8ccc17e http://github.com/defunkt/hub/contributors
    64bb19c bugfix: variable name
    546726a dont need you
    3a8d7af (tag: v1.3.1) v1.3.1
    197f429 (tag: v1.3.0) v1.3.0
    a1e1a50 not important
    3c6af16 magic `cherry-pick` supports GitHub commit URLs and "user@sha" notation
    Diff by highlighting inline word changes instead of whole lines

$ git diff --word-diff
# Returns a Boolean.
    def command?(name)
      `type -t [-#{command}`-]{+#{name}`+}
      $?.success?
    end

This flag works with other git commands that take diff flags such as
git log -p and git show.

Short status output

$ git status -sb

## thibaudgg...thibaudgg/master [ahead 1, behind 2]
 M ext/fsevent/fsevent_watch.c
?? Makefile
?? SCEvents/
?? bin/fsevent_watch
The default, verbose status output is fine for beginners, but once you
get proficient with git there is no need for it. Since I check the
status often, I want it to be as concise as possible.

Push a branch and automatically set tracking

$ git push -u origin master

# pushes the "master" branch to "origin" remote and sets up tracking

“Tracking” is essentially a link between a local and remote
branch. When working on a local branch that tracks some other branch,
you can git pull and git push without any extra arguments and git will
know what to do.

However, git push will by default push all branches that have the same
name on the remote. To limit this behavior to just the current branch,
set this configuration option:

$ git config --global push.default tracking

This is to prevent accidental pushes to branches which you’re not
ready to push yet.

Easily track a remote branch from someone else

$ git checkout -t origin/feature

# creates and checks out "feature" branch that tracks "origin/feature"
Once your teammate has shared a branch he or she was working on, you
need to create a local branch for yourself if you intend to make
changes to it. This does that and sets up tracking so that you can
just git push after making changes.

Checkout a branch, rebase and merge to master

# on branch "master":
$ git checkout feature && git rebase @{-1} && git checkout @{-2} && git merge @{-1}

# rebases "feature" to "master" and merges it in to master
The special “@{-n}” syntax means “n-th branch checked out before
current one”. When we checkout “feature”, “@{-1}” is a reference to
“master”. After rebasing, we need to use “@{-2}” to checkout master
because “@{-1}” is a reference to the same branch (“feature”) due to
how rebasing works internally.

Update: Björn Steinbrink points out that this can be done in just 2 commands:

    $ git rebase HEAD feature && git rebase HEAD @{-2}
    Pull with rebase instead of merge

    $ git pull --rebase

# e.g. if on branch "master": performs a `git fetch origin`,
# then `git rebase origin/master`
Because branch merges in git are recorded with a merge commit, they
are supposed to be meaningful—for example, to indicate when a feature
has been merged to a release branch. However, during a regular daily
workflow where several team members sync a single branch often, the
timeline gets polluted with unnecessary micro-merges on regular git
pull. Rebasing ensures that the commits are always re-applied so that
the history stays linear.

You can configure certain branches to always do this without the --rebase flag:

# make `git pull` on master always use rebase
$ git config branch.master.rebase true
You can also set up a global option to set the last property for every new tracked branch:

# setup rebase for every tracking branch
$ git config --global branch.autosetuprebase always
Find out if a change is part of a release

$ git name-rev --name-only 50f3754

"tags/v2.3.8~6"
It’s not rare that you know a SHA-1 of a commit but aren’t sure where
is it located in project’s history. If you’re like me, you probably
want to know was that change a part of some release or not. You can
use git show to see the commit message, date and the full diff, but
this doesn’t help us much—especially since comparing commit dates in a
project’s history doesn’t necessarily correspond to the order in which
they were applied.

The name-rev command can tell us the position of a commit relative to
tags in the project. The example above is from the Ruby on Rails
project. This tells us that this commit is located 6 commits before
“v2.3.8” was tagged—we can be certain that this change is now part of
Rails 2.3.8, then.

The command goes even further in its usefulness. Suppose you follow a
discussion in which someone mentions a few commits:

This bug was introduced in e6cadd422b72ba9818cc2f3b22243a6aa754c9f8
but fixed in 50f3754525c61e3ea84a407eb571617f2f39d6fe, if I recall
correctly.

You can copy that to clipboard and pipe the comment to git name-rev,
which will recognize commit SHAs and append tag information to each:

$ pbpaste | git name-rev --stdin

"This bug was introduced in e6cadd422b72ba9818cc2f3b22243a6aa754c9f8 (tags/v2.3.6~215)
but fixed in 50f3754525c61e3ea84a407eb571617f2f39d6fe (tags/v2.3.8~6), if I recall
correctly."
See also: git help describe

Find out which branch contains a change

$ git branch --contains 50f3754
This filters the lists of branches to only those which have the given
commit among their ancestors. To also include remote tracking branches
in the list, include the “-a” flag.

See which changes from a branch are already present upstream

# while on "feature" branch:
$ git cherry -v master

+ 497034f2 Listener.new now accepts a hash of options
- 2d0333ff cache the absolute images path for growl messages
+ e4406858 rename Listener#run to #start

The cherry command is useful to see which commits have been
cherry-picked from a development branch to the stable branch, for
instance. This command compares changes on the current (“feature”)
branch to upstream (“master”) and indicates which are present on both
with the “–” sign. Changes still missing from upstream are marked with
“+”.

Show the last commit which message matches a regex

$ git show :/fix
# shows the last commit which has the word "fix" in its message

$ git show :/^Merge
# shows the last merge commit
Fetch a group of remotes

$ git config remotes.default 'origin mislav staging'
$ git remote update

# fetches remotes "origin", "mislav", and "staging"
You can define a default list of remotes to be fetched by the remote
update command. These can be remotes from your teammates, trusted
community members of an opensource project, or similar. You can also
define a named group like so:

$ git config remotes.mygroup 'remote1 remote2 ...'
$ git fetch mygroup

$ git notes add
# opens the editor to add a note to the last commit

## Credits
<http://cheat.errtheblog.com/s/git>
<http://help.github.com/fork-a-repo/>
<http://mislav.uniqpath.com/2010/07/git-tips/>
