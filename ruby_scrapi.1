.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "RUBY_SCRAPI" "1" "March 2011" "" ""
.
.SH "List:"
.
.nf

*           any element
E           an element of type E
E\.warning       an E element whose class is "warning" (the document language specifies how class is determined)\.
E#myid          an E element with ID equal to "myid"\.
E[foo]          an E element with a "foo" attribute
E[foo="bar"]        an E element whose "foo" attribute value is exactly equal to "bar"
E[foo~="bar"]       an E element whose "foo" attribute value is a list of space\-separated values, one of which is exactly equal to "bar"
E[foo^="bar"]       an E element whose "foo" attribute value begins exactly with the string "bar"
E[foo$="bar"]       an E element whose "foo" attribute value ends exactly with the string "bar"
E[foo*="bar"]       an E element whose "foo" attribute value contains the substring "bar"
E[hreflang|="en"]       an E element whose "hreflang" attribute has a hyphen\-separated list of values beginning (from the left) with "en"
E:root          an E element, root of the document
E:nth\-child(n)      an E element, the n\-th child of its parent
E:nth\-last\-child(n)     an E element, the n\-th child of its parent, counting from the last one
E:nth\-of\-type(n)        an E element, the n\-th sibling of its type
E:nth\-last\-of\-type(n)   an E element, the n\-th sibling of its type, counting from the last one
E:first\-child           an E element, first child of its parent
E:last\-child            an E element, last child of its parent
E:first\-of\-type         an E element, first sibling of its type
E:last\-of\-type          an E element, last sibling of its type
E:only\-child            an E element, only child of its parent
E:only\-of\-type          an E element, only sibling of its type
E:empty                 an E element that has no children (including text nodes)
E:not(s)                an E element that does not match simple selector s
E F                     an F element descendant of an E element
E > F                   an F element child of an E element
E + F                   an F element immediately preceded by an E element
E ~ F                   an F element preceded by an E element
.
.fi
.
.SH "Scraper\.scrape(source, options?) => result"
Scrapes source and returns the result\. Source is one of:
.
.IP "" 4
.
.nf

String        HTML content: parse and scrape\.
URI           Page URL: read, parse and scrape\.
HTML::Node    Element or document, for use with structures\.
.
.fi
.
.IP "" 0
.
.P
Options for reading: \fB:last_modified\fR, \fB:etag\fR, \fB:redirect_limit\fR, \fB:user_agent\fR, \fB:timeout\fR\. Options for parsing: \fB:root_element\fR, \fB:parser\fR, \fB:parser_options\fR\.
.
.IP "" 4
.
.nf

    process(selector, *values, extractor?) { |element| \.\.\.\. }
    process(symbol?, selector, *values, extractor?) { |element| \.\.\. }
.
.fi
.
.IP "" 0
.
.P
Use selector to select elements, and extractor to extract and store values\. Pass each selected element to the block\. Block can be used instead of or in combination with extractors\.
.
.SH "Extract value from (see more options in API):"
.
.nf

:element      Element itself
:text         Text value of element
Class         Another scraper
"elem"        Element if name matches
"@attr"       Attribute if specified
"elem@attr"   Attribute if specified on element
[value, \.\.\.]  First value that matches
.
.fi
.
.SH "Extract value to (more options in API):"
.
.nf

symbol        Instance variable (e\.g\. :title to @title)
symbol[]      Array instance variable (e\.g\. "links[]")
:skip         If true, do not further process this element
.
.fi
.
.P
Attribute accessors defined for each symbol used\. If first argument is symbol, uses that name to replace any other processing rule with same name\.
.
.IP "" 4
.
.nf

process_first(selector, *values, extractor?) { |element| \.\.\.\. }
process_first(symbol?, selector, *values, extractor?) { |element| \.\.\. }
.
.fi
.
.IP "" 0
.
.P
Similar to process but only processes the first selected element (if more than one)\.
.
.IP "" 4
.
.nf

result(*symbols)
.
.fi
.
.IP "" 0
.
.P
Specifies which instance variables to return\. One symbol: return value of that variable\. Multiple symbols: return object with suitable accessors\.
.
.P
array(*symbols)
.
.P
Specifies which instance variables are arrays\. Otherwise, stores only last extracted value\.
.
.IP "" 4
.
.nf

selector(symbol, selector, *values)
selector(symbol?, selector, *values) { |elements| \.\.\. }
.
.fi
.
.IP "" 0
.
.P
Defines selector method with the given name (symbol) that takes an element as argument and returns array of selected elements, empty if no elements selected\. Defines first_ method that returns the first selected element or nil\.
.
.SH "Instance Methods"
\fBextracted\fR True if any processing rule returned true (also extracted = true/false)\.
.
.br
\fBskip(element?)\fR Do not further process element\. See also :skip=>true\.
.
.br
\fBstop()\fR Stop processing\.
.
.br
\fBprepare(document)\fR Called on document before any processing\.
.
.br
\fBcollect()\fR Called after processing is done\.
.
.br
\fBresult()\fR Called to return result\. By default returns self if extracted\. You can override method, or redefine with class method result\.
.
.br

