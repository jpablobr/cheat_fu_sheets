Ruby Data Mapper Properties
==========================

## Example Model

    class Post
      include DataMapper::Resource
      property :id,        Serial                       # primary serial key
      property :title,     String,  :nullable => false  # Cannot be null
      property :published, Boolean, :default  => false  # Default value for new records is false
    end

## Core Types

`Boolean              `<br>
`String               `<br>
`Text                 `<br>
`Float                `<br>
`Integer              `<br>
`BigDecimal,          `<br>
`DateTime, Date, Time `<br>
`Object, (marshalled) `<br>
`Discriminator        `<br>

## Types via 'dm-types'

` Csv          ` <br>
` Enum         ` <br>
` EpochTime    ` <br>
` FilePath     ` <br>
` Flag         ` <br>
` IPAddress    ` <br>
` URI          ` <br>
` Yaml         ` <br>
` Json         ` <br>
` BCryptHash   ` <br>
` Regex        ` <br>

## Natural Keys

property :sku, String, :key => true<br>

## Lazy Loading

Properties may be 'lazy loaded', after which you must call the
method directly to have it's contents loaded. Text properties are
lazy by default.<br>

    property :body, Text
    property :body, Text, :lazy => false

Lazy Loading can also be done via contexts, which let you group
lazily loaded properties together, so that when one is fetched,
all the associated ones will be as well, cutting down on trips
to the data-store.<br>

    property :summary, Text, :lazy => [:show]
    property :body,    Text, :lazy => [:show]

## Overridding Setters

Use the #attribute_set method instead of using @inst_vars.<br>

    def name= string
      raise ArgumentError if string != 'amazing'
      attribute_set :name, string
    end
