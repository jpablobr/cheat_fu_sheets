.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "RUBY_CAPISTRANO" "1" "April 2011" "" ""
This work is licensed under the Creative Commons Attribution\-NonCommercial\-NoDerivs 2\.0 License\. To view a copy of this license, visit http://creativecommons\.org/licenses/by\-nc\-nd/2\.0/ukn
.
.SH "Shell Commands:"
Installation:
.
.IP "" 4
.
.nf

$ gem install capistrano
.
.fi
.
.IP "" 0
.
.P
Add your application to Capistrano (capistranize):
.
.IP "" 4
.
.nf

$ cap \-\-apply\-to /path/to/your/app YourApplicationName
.
.fi
.
.IP "" 0
.
.P
NOTE: Rake access to capistrano is deprecated in Capistrano 1\.3\. Use the \'cap\' command instead\.
.
.P
Execute the setup task:
.
.IP "" 4
.
.nf

$ rake remote:exec ACTION=setup
.
.fi
.
.IP "" 0
.
.P
Execute the cold_deploy task:
.
.IP "" 4
.
.nf

$ rake remote:exec ACTION=cold_deploy
.
.fi
.
.IP "" 0
.
.P
Deploy your application:
.
.IP "" 4
.
.nf

$ rake deploy
.
.fi
.
.IP "" 0
.
.P
Similar to deploy, but it runs the migrate task on the new release before updating the symlink:
.
.IP "" 4
.
.nf

$ rake remote:deploy_with_migrations
.
.fi
.
.IP "" 0
.
.P
Rollback a release from production:
.
.IP "" 4
.
.nf

$ rake rollback
.
.fi
.
.IP "" 0
.
.P
Execute the disable_web task:
.
.IP "" 4
.
.nf

$ rake remote_exec ACTION=disable_web
UNTIL=\e"tomorrow morning\e"
REASON=\e"vital upgrade\e"
Using the invoke task:
$ rake remote_exec ACTION=invoke
COMMAND=\e"svn up /u/apps/flipper/current/app/views\e"
ROLES=appn
.
.fi
.
.IP "" 0
.
.SH "Standard Tasks"
cleans up the releases directory, leaving the five most recent releases:
.
.IP "" 4
.
.nf

$ cap cleanup
.
.fi
.
.IP "" 0
.
.P
used when deploying an application for the first time\. Starts the applicatioxE2\ex80\ex99s spinner (via the spinner task) and then does a normal deploy:
.
.IP "" 4
.
.nf

$ cap cold_deploy
.
.fi
.
.IP "" 0
.
.P
updates all the code on your server (via update_code and symlink tasks), then restarts the FastCGI listeners on the application servers (via the restart task):
.
.IP "" 4
.
.nf

$ cap deploy
.
.fi
.
.IP "" 0
.
.P
prints the difference between what was last deployed, and what is currently in your repository:
.
.IP "" 4
.
.nf

$ cap diff_from_last_deploy
.
.fi
.
.IP "" 0
.
.P
puts up a static maintenance page that is displayed to visitors:
.
.IP "" 4
.
.nf

$ cap disable_web
.
.fi
.
.IP "" 0
.
.P
removes the maintenance page:
.
.IP "" 4
.
.nf

$ cap enable_web
.
.fi
.
.IP "" 0
.
.P
allows you to send commands directly:
.
.IP "" 4
.
.nf

$ cap invoke
.
.fi
.
.IP "" 0
.
.P
changes to the directory of your current release (as indicated by the current symlink), and runs rake RAILS_ENV=production migrate:
.
.IP "" 4
.
.nf

$ cap migrate
.
.fi
.
.IP "" 0
.
.P
restarts all FastCGI listeners for your application by calling the reaper command without arguments\. Only executed on :app servers
.
.IP "" 4
.
.nf

$ cap restart
.
.fi
.
.IP "" 0
.
.P
rolls your application back to the previously deployed version determines the previous release , updates the current symlink to point to that, and then deletes the latest release
.
.IP "" 4
.
.nf

$ cap rollback
.
.fi
.
.IP "" 0
.
.P
Creates and chmods the directory tree properly:
.
.IP "" 4
.
.nf

$ cap setup
.
.fi
.
.IP "" 0
.
.P
inspect the existing tasks and display them to standard out in alphabetical order, along with their descriptions:
.
.IP "" 4
.
.nf

$ cap show_tasks
.
.fi
.
.IP "" 0
.
.P
starts the spinner process for your application:
.
.IP "" 4
.
.nf

$ cap spinner
.
.fi
.
.IP "" 0
.
.P
updates the current symlink to the latest deployed version of the code
.
.IP "" 4
.
.nf

$ cap symlink
.
.fi
.
.IP "" 0
.
.P
Checks out your source code, deletes the log and public/system directories in your new release, symlinks log to
.
.IP "" 4
.
.nf

#{shared_path}/log, symlinks public/system to #{shared_path}/system:
$ cap update_coden
.
.fi
.
.IP "" 0
.
.SH "config/deploy\.rb"
Defining Tasks
.
.IP "" 4
.
.nf

task :hello_world do  run \e"echo Hello, $HOSTNAME\e"
end
task :hello_world, :roles => [:db, :app] do  puts \e"calling hello_world\.\.\.\e"  hello_world
end
.
.fi
.
.IP "" 0
.
.P
Transactions
.
.IP "" 4
.
.nf

task :cold_deploy do  transaction do    task_one_here    task_two_here  end  task_three_not_in_transaction
end
*Capturing output with run
run \e"sudo ls \-la\e" do |channel, stream, data|  if data =~ /^Password:/    logger\.info \e"#{channel[:host]} asked for password\e"    channel\.send_data \e"mypass\e"  end
end
buffer = render(:template =>
<<EXAMPLE_TEMPLATE)  This template will be rendered replacing variables  <%= like_this_variable =>  with their values\.
EXAMPLE_TEMPLATE
put buffer, \e"path/to/save/file\.txt\e", :mode => 0755
.
.fi
.
.IP "" 0
.
.P
multi\-stage set :stages, %w(staging production testing) # [optional] defaults to [development, test, staging?, production]\. set :default_stage, \e"testing\e" # [optional] if omitted, cap aborts if you don\'t specify in args require \'capistrano/ext/multistage\'
.
.P
Stage\-specific code in config/deploy/staging\.rb and config/deploy/production\.rb\. see: http://weblog\.jamisbuck\.org/2007/7/23/capistrano\-multistage *deploy\.rb variables and their defaults The name of your application\.
.
.IP "" 4
.
.nf

:application  (required)
.
.fi
.
.IP "" 0
.
.P
The location of your code\exE2\ex80\ex99s scm repository
.
.IP "" 4
.
.nf

:repository  (required)
.
.fi
.
.IP "" 0
.
.P
The address of the server to use as a gateway\.
.
.IP "" 4
.
.nf

:gateway  nil
.
.fi
.
.IP "" 0
.
.P
The name of the user to use when logging into the remote host(s)\.
.
.IP "" 4
.
.nf

:user    current_user
.
.fi
.
.IP "" 0
.
.P
The password to use for logging into the remote host(s)\.
.
.IP "" 4
.
.nf

:password  password
.
.fi
.
.IP "" 0
.
.P
The root of the directory tree on the remote host(s) that the application should be deployed to
.
.IP "" 4
.
.nf

:deploy_to /apps/#{application}
.
.fi
.
.IP "" 0
.
.P
The directory under deploy_to that should contain each deployed revision\.
.
.IP "" 4
.
.nf

:version_dir  releases
.
.fi
.
.IP "" 0
.
.P
The name to use (relative to deploy_to) for the symlink that points at the current release
.
.IP "" 4
.
.nf

:current_dir  current
.
.fi
.
.IP "" 0
.
.P
The name of the directory under deploy_to that will contain directories and files to be shared between all releases\.
.
.IP "" 4
.
.nf

:shared_dir  shared
.
.fi
.
.IP "" 0
.
.P
This specifies the revision you want to check out on the remote machines\.
.
.IP "" 4
.
.nf

:revision  (latest)
.
.fi
.
.IP "" 0
.
.P
The source control module to use\. Current supported are :subversion, :cvs, :darcs
.
.IP "" 4
.
.nf

:scm    subversion
.
.fi
.
.IP "" 0
.
.P
The location on the remote host of the source control executable\.
.
.IP "" 4
.
.nf

:svn,:cvs,:darcs
.
.fi
.
.IP "" 0
.
.P
The subversion operation to use when checking out code on the remote host\. Can be set to \exE2\ex80\ex9Cexport\exE2\ex80\ex9D
.
.IP "" 4
.
.nf

:checkout  \e"co\e"
.
.fi
.
.IP "" 0
.
.P
Hash of additional options passed to the SSH connection routine\. This lets you set (among other things) a non\-standard port to connect on:
.
.IP "" 4
.
.nf

(ssh_options[:port] = 2345)
:ssh_options  Hash\.new
.
.fi
.
.IP "" 0
.
.P
Whether or not tasks that can use sudo, ought to use sudo\. In a shared environment, this is typically not desirable (or possible), and in that case you should set this variable to false
.
.IP "" 4
.
.nf

:use_sudo  true
.
.fi
.
.IP "" 0
.
.P
Sets the path to sudo\.
.
.IP "" 4
.
.nf

:sudo
.
.fi
.
.IP "" 0
.
.P
variables are set via:
.
.IP "" 4
.
.nf

set :application, \e"flipper\e"n
.
.fi
.
.IP "" 0
.
.SH "Interactive Shell (requires capistrano\-1\.2\.0)"
Shell is essentially a SSH interface to your servers, so you can run standard commands such as \'ls\' or \'cp\' as well as Capistrano\-specific ones\. Start the interactive Capistrano shell
.
.IP "" 4
.
.nf

$ cap \-v shell
.
.fi
.
.IP "" 0
.
.P
Execute Capistrano tasks
.
.IP "" 4
.
.nf

cap> !deploy
cap> !update_code symlink
cap> !setup deploy
cap> on app2\.foo\.com !setup
cap> with app,db !setup deploy"
.
.fi
.
.IP "" 0

