.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "GIT" "1" "April 2011" "" ""
.
.SH "NAME"
\fBGit\fR \- Cheats
.
.SH "Setup"
Add "\-\-global" after "git config" to make it global to all git repos (writes to ~/\.gitconfig)\.
.
.SH "Add colors to your ~/\.gitconfig file:"
.
.nf

[color]
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
.
.fi
.
.SH "Highlight whitespace in diffs"
.
.nf

[color]
  ui = true
[color "diff"]
  whitespace = red reverse
[core]
  whitespace=fix,\-indent\-with\-non\-tab,trailing\-space,cr\-at\-eol
.
.fi
.
.SH "Add aliases to your ~/\.gitconfig file:"
.
.nf

[alias]
  st = status
  ci = commit
  br = branch
  co = checkout
  df = diff
  lg = log \-p
  lol = log \-\-graph \-\-decorate \-\-pretty=oneline \-\-abbrev\-commit
  lola = log \-\-graph \-\-decorate \-\-pretty=oneline \-\-abbrev\-commit \-\-all
  ls = ls\-files
.
.fi
.
.SH "Configuration:"
.
.SH "edit the \.git/config [or ~/\.gitconfig] file in your $EDITOR"
.
.nf

git config \-e [\-\-global]
.
.fi
.
.SH "sets your name and email for commit messages"
.
.nf

git config \-\-global user\.name \'John Doe\'
git config \-\-global user\.email johndoe@example\.com
.
.fi
.
.SH "Setup new branches so that git\-pull(1)"
.
.nf

git config branch\.autosetupmerge true
.
.fi
.
.P
Will appropriately merge from that remote branch\. Recommended\. Without this, you will have to add \fB\-\-track\fR to your branch command or manually merge remote tracking branches with "fetch" and then "merge"\.
.
.SH "Convert the newlines to the systemâ€™s standard"
.
.nf

git config core\.autocrlf true
.
.fi
.
.SH "OPTIONS"
Helpful options\.
.
.P
\fBgit reflog\fR:
.
.P
Use this to recover from \fImajor\fR fuck ups! It\'s basically a log of the last few actions and you might have luck and find old commits that have been lost by doing a complex merge\.
.
.P
\fBgit diff\fR:
.
.P
Show a diff of the changes made since your last commit to diff one file: "git diff \-\- \fIfilename\fR" to show a diff between staging area and HEAD: \fBgit diff \-\-cached\fR
.
.P
\fBgit status\fR:
.
.P
show files added to the staging area, files with changes, and untracked files
.
.P
\fBgit log\fR:
.
.P
show recent commits, most recent on top\. Useful options: \-\-color with color \-\-graph with an ASCII\-art commit graph on the left \-\-decorate with branch and tag names on appropriate commits \-\-stat with stats (files changed, insertions, and deletions) \-p with full diffs \-\-author=foo only by a certain author \-\-after="MMM DD YYYY" ex\. ("Jun 20 2008") only commits after a certain date \-\-before="MMM DD YYYY" only commits that occur before a certain date \-\-merge only the commits involved in the current merge conflicts
.
.P
\fBgit log <ref>\.\.<ref>\fR:
.
.P
Show commits between the specified range\. Useful for seeing changes from remotes:
.
.P
\fBgit log HEAD\.\.origin/master\fR: # after git remote update
.
.P
\fBgit show <rev>\fR:
.
.P
show the changeset (diff) of a commit specified by \fIrev\fR, which can be any SHA1 commit ID, branch name, or tag (shows the last commit (HEAD) by default)
.
.P
\fBgit show \-\-name\-only <rev>\fR:
.
.P
show only the names of the files that changed, no diff information\.
.
.P
\fBgit blame <file>\fR:
.
.P
show who authored each line in \fIfile\fR
.
.P
\fBgit blame <file> <rev>\fR:
.
.P
show who authored each line in \fIfile\fR as of \fIrev\fR (allows blame to go back in time)
.
.P
\fBgit gui blame\fR:
.
.P
really nice GUI interface to git blame
.
.P
\fBgit whatchanged <file>\fR:
.
.P
show only the commits which affected \fIfile\fR listing the most recent first E\.g\. view all changes made to a file on a branch: git whatchanged \fIbranch\fR \fIfile\fR | grep commit | colrm 1 7 | xargs \-I % git show % \fIfile\fR this could be combined with git remote show \fIremote\fR to find all changes on all branches to a particular file\.
.
.P
\fBgit diff <commit> head path/to/fubar\fR:
.
.P
show the diff between a file on the current branch and potentially another branch
.
.P
\fBgit diff head \-\- <file>\fR:
.
.P
use this form when doing git diff on cherry\-pick\'ed (but not committed) changes somehow changes are not shown when using just git diff\.
.
.P
\fBgit ls\-files\fR:
.
.P
list all files in the index and under version control\.
.
.P
\fBgit ls\-remote <remote> [HEAD]\fR:
.
.P
show the current version on the remote repo\. This can be used to check whether a local is required by comparing the local head revision\.
.
.SH "Adding / Deleting"
\fBgit add <file1> <file2> \.\.\.\fR
.
.P
add \fIfile1\fR, \fIfile2\fR, etc\.\.\. to the project
.
.P
\fBgit add <dir>\fR
.
.P
add all files under directory
.
.P
\fBgit add \.\fR
.
.P
add all files under the current directory to the project \fIWARNING\fR: including untracked files\.
.
.P
\fBgit rm <file1> <file2> \.\.\.\fR
.
.P
remove \fIfile1\fR, \fIfile2\fR, etc\.\.\. from the project
.
.P
\fBgit rm $(git ls\-files \-\-deleted)\fR
.
.P
remove all deleted files from the project
.
.P
\fBgit rm \-\-cached <file1> <file2> \.\.\.\fR
.
.P
commits absence of \fIfile1\fR, \fIfile2\fR, etc\.\.\. from the project
.
.SH "Ignoring"
\fBEdit $GIT_DIR/info/exclude\.\fR
.
.P
See Environment Variables below for explanation on \fB$GIT_DIR\.\fR
.
.P
Add a file \.gitignore to the root of your project\. This file will be checked in\. Either way you need to add patterns to exclude to these files\.
.
.SH "Staging"
\fBgit add <file1> <file2> \.\.\.\fR
.
.P
\fBgit stage <file1> <file2> \.\.\.\fR
.
.P
add changes in \fIfile1\fR, \fIfile2\fR \.\.\. to the staging area (to be included in the next commit
.
.P
\fBgit add \-p\fR
.
.P
\fBgit stage \-\-patch\fR
.
.P
interactively walk through the current changes (hunks) in the working tree, and decide which changes to add to the staging area\.
.
.P
\fBgit add \-i\fR
.
.P
\fBgit stage \-\-interactive\fR
.
.P
interactively add files/changes to the staging area\. For a simpler mode (no menu), try \fBgit add \-\-patch\fR (above)
.
.SH "Unstaging"
\fBgit reset HEAD <file1> <file2> \.\.\.\fR
.
.P
remove the specified files from the next commit
.
.SH "Committing"
\fBgit commit <file1> <file2> \.\.\. [\-m <msg>]\fR
.
.P
commit \fIfile1\fR, \fIfile2\fR, etc\.\.\., optionally using commit message \fImsg\fR, otherwise opening your editor to let you type a commit message
.
.P
\fBgit commit \-a\fR
.
.P
commit all files changed since your last commit (does not include new (untracked) files)
.
.P
\fBgit commit \-v\fR
.
.P
commit verbosely, i\.e\. includes the diff of the contents being committed in the commit message screen
.
.P
\fBgit commit \-\-amend\fR
.
.P
edit the commit message of the most recent commit
.
.P
\fBgit commit \-\-amend <file1> <file2> \.\.\.\fR
.
.P
redo previous commit, including changes made to \fIfile1\fR, \fIfile2\fR, etc\.\.\.
.
.SH "Branching"
\fBgit branch\fR
.
.P
list all local branches
.
.P
\fBgit branch \-r\fR
.
.P
list all remote branches
.
.P
\fBgit branch \-a\fR
.
.P
list all local and remote branches
.
.P
\fBgit branch <branch>\fR
.
.P
create a new branch named \fIbranch\fR, referencing the same point in history as the current branch
.
.P
\fBgit branch <branch> <start\-point>\fR create a new branch named \fIbranch\fR, referencing \fIstart\-point\fR, which may be specified any way you like, including using a branch name or a tag name
.
.P
\fBgit push <repo> <start\-point>:refs/heads/<branch>\fR
.
.P
create a new remote branch named \fIbranch\fR, referencing \fIstart\-point\fR on the remote\. Example: git push origin origin:refs/heads/branch\-1 Example: git push origin origin/branch\-1:refs/heads/branch\-2
.
.P
\fBgit branch \-\-track <branch> <remote\-branch>\fR
.
.P
create a tracking branch\. Will push/pull changes to/from another repository\. Example: git branch \-\-track experimental origin/experimental
.
.P
\fBgit branch \-d <branch>\fR
.
.P
delete the branch \fIbranch\fR; if the branch you are deleting points to a commit which is not reachable from the current branch, this command will fail with a warning\.
.
.P
\fBgit branch \-r \-d <remote\-branch>\fR
.
.P
delete a remote\-tracking branch\. Example: git branch \-r \-d wycats/master
.
.P
\fBgit branch \-D <branch>\fR
.
.P
even if the branch points to a commit not reachable from the current branch, you may know that that commit is still reachable from some other branch or tag\. In that case it is safe to use this command to force git to delete the branch\.
.
.P
\fBgit checkout <branch>\fR
.
.P
make the current branch \fIbranch\fR, updating the working directory to reflect the version referenced by \fIbranch\fR
.
.P
\fBgit checkout \-b <new> <start\-point>\fR
.
.P
create a new branch \fInew\fR referencing \fIstart\-point\fR, and check it out\.
.
.P
\fBgit push <repository> :<branch>\fR
.
.P
removes a branch from a remote repository\. Example: git push origin :old_branch_to_be_deleted
.
.P
\fBgit co <branch> <path to new file>\fR
.
.P
Checkout a file from another branch and add it to this branch\. File will still need to be added to the git branch, but it\'s present\. Eg\. git co remote_at_origin__tick702_antifraud_blocking \.\.\.\./\.\.\.nt_elements_for_iframe_blocked_page\.rb
.
.P
\fBgit show <branch> \-\- <path to file that does not exist>\fR
.
.P
Eg\. git show remote_tick702 \-\- path/to/fubar\.txt show the contents of a file that was created on another branch and that does not exist on the current branch\.
.
.P
\fBgit show <rev>:<repo path to file>\fR
.
.P
Show the contents of a file at the specific revision\. Note: path has to be absolute within the repo\.
.
.SH "Merging"
\fBgit merge <branch>\fR
.
.P
merge branch \fIbranch\fR into the current branch; this command is idempotent and can be run as many times as needed to keep the current branch up\-to\-date with changes in \fIbranch\fR
.
.P
\fBgit merge <branch> \-\-no\-commit\fR
.
.P
merge branch \fIbranch\fR into the current branch, but do not autocommit the result; allows you to make further tweaks
.
.P
\fBgit merge <branch> \-s ours\fR
.
.P
merge branch \fIbranch\fR into the current branch, but drops any changes in \fIbranch\fR, using the current tree as the new tree
.
.SH "Cherry\-Picking"
\fBgit cherry\-pick [\-\-edit] [\-n] [\-m parent\-number] [\-s] [\-x] <commit>\fR
.
.P
selectively merge a single commit from another local branch Example: git cherry\-pick 7300a6130d9447e18a931e898b64eefedea19544
.
.SH "Squashing"
WARNING: "git rebase" changes history\. Be careful\. Google it\.
.
.P
\fBgit rebase \-\-interactive HEAD~10\fR
.
.P
(then change all but the first "pick" to "squash") squash the last 10 commits into one big commit
.
.SH "Conflicts"
\fBgit mergetool\fR
.
.P
work through conflicted files by opening them in your mergetool (opendiff, kdiff3, etc\.) and choosing left/right chunks\. The merged result is staged for commit\.
.
.P
For binary files or if mergetool won\'t do, resolve the conflict(s) manually and then do:
.
.P
\fBgit add <file1> [<file2> \.\.\.]\fR
.
.P
Once all conflicts are resolved and staged, commit the pending merge with:
.
.P
\fBgit commit\fR
.
.SH "Sharing"
\fBgit fetch <remote>\fR
.
.P
update the remote\-tracking branches for \fIremote\fR (defaults to "origin")\. Does not initiate a merge into the current branch (see "git pull" below)\.
.
.P
\fBgit pull\fR
.
.P
fetch changes from the server, and merge them into the current branch\. Note: \.git/config must have a [branch "some_name"] section for the current branch, to know which remote\-tracking branch to merge into the current branch\. Git 1\.5\.3 and above adds this automatically\.
.
.P
\fBgit push\fR
.
.P
update the server with your commits across all branches that are \fICOMMON\fR between your local copy and the server\. Local branches that were never pushed to the server in the first place are not shared\.
.
.P
\fBgit push origin <branch>\fR
.
.P
update the server with your commits made to \fIbranch\fR since your last push\. This is always \fIrequired\fR for new branches that you wish to share\. After the first explicit push, "git push" by itself is sufficient\.
.
.P
\fBgit push origin <branch>:refs/heads/<branch>\fR
.
.P
E\.g\. git push origin twitter\-experiment:refs/heads/twitter\-experiment Which, in fact, is the same as git push origin \fIbranch\fR but a little more obvious what is happening\.
.
.SH "Reverting"
\fBgit revert <rev>\fR
.
.P
reverse commit specified by \fIrev\fR and commit the result\. This does \fInot\fR do the same thing as similarly named commands in other VCS\'s such as "svn revert" or "bzr revert", see below
.
.P
\fBgit checkout <file>\fR
.
.P
re\-checkout \fIfile\fR, overwriting any local changes
.
.P
\fBgit checkout \.\fR
.
.P
re\-checkout all files, overwriting any local changes\. This is most similar to "svn revert" if you\'re used to Subversion commands
.
.SH "Fix mistakes / Undo"
\fBgit reset \-\-hard\fR
.
.P
abandon everything since your last commit; this command can be DANGEROUS\. If merging has resulted in conflicts and you\'d like to just forget about the merge, this command will do that\.
.
.P
\fBgit reset \-\-hard ORIG_HEAD\fR
.
.P
undo your most recent \fIsuccessful\fR merge \fIand\fR any changes that occurred after\. Useful for forgetting about the merge you just did\. If there are conflicts (the merge was not successful), use "git reset \-\-hard" (above) instead\.
.
.P
\fBgit reset \-\-soft HEAD^\fR
.
.P
forgot something in your last commit? That\'s easy to fix\. Undo your last commit, but keep the changes in the staging area for editing\.
.
.P
\fBgit commit \-\-amend\fR
.
.P
redo previous commit, including changes you\'ve staged in the meantime\. Also used to edit commit message of previous commit\.
.
.SH "Plumbing"
\fBtest <sha1\-A> = $(git merge\-base <sha1\-A> <sha1\-B>)\fR
.
.P
determine if merging sha1\-B into sha1\-A is achievable as a fast forward; non\-zero exit status is false\.
.
.SH "Stashing"
\fBgit stash\fR
.
.P
\fBgit stash save <optional\-name>\fR
.
.P
save your local modifications to a new stash (so you can for example "git svn rebase" or "git pull")
.
.P
\fBgit stash apply\fR
.
.P
restore the changes recorded in the stash on top of the current working tree state
.
.P
\fBgit stash pop\fR
.
.P
restore the changes from the most recent stash, and remove it from the stack of stashed changes
.
.P
\'git stash list\'
.
.P
list all current stashes
.
.P
\fBgit stash show <stash\-name> \-p\fR
.
.P
show the contents of a stash \- accepts all diff args
.
.P
\fBgit stash drop [<stash\-name>]\fR
.
.P
delete the stash
.
.P
\fBgit stash clear\fR
.
.P
delete all current stashes
.
.SH "Remotes"
\fBgit remote add <remote> <remote_URL>\fR
.
.P
adds a remote repository to your git config\. Can be then fetched locally\.
.
.IP "" 4
.
.nf

Example:
  git remote add coreteam git://github\.com/wycats/merb\-plugins\.git
  git fetch coreteam
.
.fi
.
.IP "" 0
.
.P
\fBgit push <remote> :refs/heads/<branch>\fR
.
.P
delete a branch in a remote repository
.
.P
\fBgit push <remote> <remote>:refs/heads/<remote_branch>\fR
.
.P
create a branch on a remote repository Example: git push origin origin:refs/heads/new_feature_name
.
.P
\fBgit push <repository> +<remote>:<new_remote>\fR
.
.P
replace a \fIremote\fR branch with \fInew_remote\fR think twice before do this Example: git push origin +master:my_branch
.
.P
\fBgit remote prune <remote>\fR
.
.P
prune deleted remote\-tracking branches from "git branch \-r" listing
.
.P
\fBgit remote add \-t master \-m master origin git://example\.com/git\.git/\fR
.
.P
add a remote and track its master
.
.P
\fBgit remote show <remote>\fR
.
.P
show information about the remote server\.
.
.P
\fBgit checkout \-b <local branch> <remote>/<remote branch>\fR
.
.P
Eg git checkout \-b myfeature origin/myfeature Track a remote branch as a local branch\.
.
.P
\fBgit pull <remote> <branch>\fR
.
.P
git push For branches that are remotely tracked (via git push) but that complain about non\-fast forward commits when doing a git push\. The pull synchronizes local and remote, and if all goes well, the result is pushable\.
.
.P
\fBgit fetch <remote>\fR
.
.P
Retrieves all branches from the remote repository\. After this \'git branch \-\-track \.\.\.\' can be used to track a branch from the new remote\.
.
.SH "Submodules"
\fBgit submodule add <remote_repository> <path/to/submodule>\fR
.
.P
add the given repository at the given path\. The addition will be part of the next commit\.
.
.P
\fBgit submodule update [\-\-init]\fR
.
.P
Update the registered submodules (clone missing submodules, and checkout the commit specified by the super\-repo)\. \-\-init is needed the first time\.
.
.P
\fBgit submodule foreach <command>\fR Executes the given command within each checked out submodule\.
.
.SH "Removing submodules"
.
.IP "1." 4
Delete the relevant line from the \.gitmodules file\.
.
.IP "2." 4
Delete the relevant section from \.git/config\.
.
.IP "3." 4
Run git rm \-\-cached path_to_submodule (no trailing slash)\.
.
.IP "4." 4
Commit and delete the now untracked submodule files\.
.
.IP "" 0
.
.P
Updating submodules To update a submodule to a new commit:
.
.IP "" 4
.
.nf

1\. update submodule:
    cd <path to submodule>
    git pull
2\. commit the new version of submodule:
    cd <path to toplevel>
    git commit \-m "update submodule version"
3\. check that the submodule has the correct version
    git submodule status
.
.fi
.
.IP "" 0
.
.P
If the update in the submodule is not committed in the main repository, it is lost and doing git submodule update will revert to the previous version\.
.
.SH "Patches"
\fBgit format\-patch HEAD^\fR
.
.P
Generate the last commit as a patch that can be applied on another clone (or branch) using \'git am\'\. Format patch can also generate a patch for all commits using \'git format\-patch HEAD^ HEAD\' All page files will be enumerated with a prefix, e\.g\. 0001 is the first patch\.
.
.P
\fBgit format\-patch <Revision>^\.\.<Revision>\fR
.
.P
Generate a patch for a single commit\. E\.g\. git format\-patch d8efce43099 Revision does not need to be fully specified\.
.
.P
\fBgit am <patch file>\fR Applies the patch file generated by format\-patch\.
.
.P
\fBgit diff \-\-no\-prefix > patchfile\fR Generates a patch file that can be applied using patch: patch \-p0 < patchfile Useful for sharing changes without generating a git commit\.
.
.SH "Tags"
\fBgit tag \-l\fR
.
.P
Will list all tags defined in the repository\.
.
.P
\fBgit co <tag_name>\fR
.
.P
Will checkout the code for a particular tag\. After this you\'ll probably want to do: \'git co \-b \fIsome branch name\fR\' to define a branch\. Any changes you now make can be committed to that branch and later merged\.
.
.SH "Git Instaweb"
git instaweb \-\-httpd=webrick [\-\-start | \-\-stop | \-\-restart]
.
.SH "Environment Variables"
\fBGIT_AUTHOR_NAME\fR, \fBGIT_COMMITTER_NAME\fR
.
.P
Your full name to be recorded in any newly created commits\. Overrides user\.name in \.git/config
.
.P
\fBGIT_AUTHOR_EMAIL\fR, \fBGIT_COMMITTER_EMAIL\fR
.
.P
Your email address to be recorded in any newly created commits\. Overrides user\.email in \.git/config
.
.P
\fBGIT_DIR\fR
.
.P
Location of the repository to use (for out of working directory repositories)
.
.P
\fBGIT_WORKING_TREE\fR
.
.P
Location of the Working Directory \- use with GIT_DIR to specifiy the working directory root or to work without being in the working directory at all\.
.
.SH "Credits"
\fIhttp://cheat\.errtheblog\.com/s/git\fR
