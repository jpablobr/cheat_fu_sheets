ruby hashes(1) -- cheat sheet
=============================

## Using Ruby hashes as keyword arguments, with easy defaults

The only downside to doing this is you lose out on easily setting
default values using Ruby's default method argument values. You might
use code something similar to the following to make up for this:

    def some_method(opts={})
      my_foo =  opts[:foo] || 'mydefaultfoo'
    end

However, as you have more and more keyword options, setting defaults in
this way gets rather tedious. Fortunately, Ruby's Hash#merge comes to
our rescue (almost) - it allows you to merge the contents of one hash
with another. The only problem - any duplicate keys in the hash you are
merging will overwrite your original hash values - when it comes to
setting default values, we want this to work the other way around; we
only want values in the defaults hash to be merged if they do not exist
in the original hash. Again, Ruby comes to our rescue - Hash#merge takes
a block as an argument and will pass any duplicate values that crop up
into the block.

    def my_method(opts={})
      {:arg_one => 'foo', :arg_two => 'two'}.merge!(opts)
    end

Update 2: Josh Susser now informs me (see comments) that this
functionality is built-right into Rails courtesy of ReverseMerge. I
still think with_defaults sounds better but I guess that pretty much
makes this post redundant!

## LINKS
http://lukeredpath.co.uk/blog/using-ruby-hashes-as-keyword-arguments-with-easy-defaults.html
