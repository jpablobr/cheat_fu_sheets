postgresql(1) -- cheat_fu sheets
================================

## Install TLDR

sudo -u postgres createuser --superuser $USER

This is due to the permissions in `pg_hba.conf` being too restrictive by
default. To allow rails to connect, simply change the bottom of
pg_hba.conf to look like this.

    # TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD

    # "local" is for Unix domain socket connections only
    local   all         all                               trust
    # IPv4 local connections:
    host    all         all         127.0.0.1/32          trust
    # IPv6 local connections:
    host    all         all         ::1/128               trust
    ## LINKS

## development/test/production:

    adapter: postgresql
    database: postgresql-env
    username: user
    password: pass
    host: 127.0.0.1


## Commands

      Start PostgreSQL server:
      # /etc/init.d/postgresql start
      Stop PostgreSQL:
      # /etc/init.d/postgresql stop
      Restart PostgreSQL:
      # /etc/init.d/postgresql restart

## Setup

    sudo apt-get install libpq-dev
    sudo apt-get install postgresql

## Administration

pgAdmin III is a handy GUI for PostgreSQL, it is essential to
beginners. To install it, type at the command line:

    sudo apt-get install pgadmin3

## Basic Server Setup

If you don't intend to connect to the database from other machines, this
alternative setup may be simpler.

By default in Ubuntu, Postgresql is configured to use 'ident sameuser'
authentication for any connections from the same machine. Check out the
excellent Postgresql documentation for more information, but essentially
this means that if your Ubuntu username is 'foo' and you add 'foo' as a
Postgresql user then you can connect to the database without requiring a
password.

Since the only user who can connect to a fresh install is the postgres
user, here is how to create yourself a database account (which is in
this case also a database superuser) with the same name as your login
name and then create a password for the user:

     sudo -u postgres createuser --superuser $USER
     sudo -u postgres psql

     postgres=# \password $USER

Client programs, by default, connect to the local host using your Ubuntu
login name and expect to find a database with that name too. So to make
things REALLY easy, use your new superuser privileges granted above to
create a database with the same name as your login name:

     createdb $USER

Connecting to your own database to try out some SQL should now be as easy as:

     psql

Creating additional database is just as easy, so for example, after
running this:

     createdb amarokdb

## Managing users and rights

To manage users, you first have to edit
/etc/postgresql/8.1/main/pg_hba.conf and modify the default
configuration which is very protective. For example, if you want
postgres to manage its own users (not linked with system users), you
will add the following line:

    8<-------------------------------------------
    # TYPE  DATABASE    USER        IP-ADDRESS        IP-MASK           METHOD
    host    all         all         10.0.0.0       255.255.255.0    md5
    8<-------------------------------------------

Which means that on your local network (10.0.0.0/24 - replace with your
own local network !), postgres users can connect through the network to
the database providing a classical couple user / password.

To create a database with a user that have full rights on the database,
use the following

    sudo -u postgres createuser -D -A -P myuser
    sudo -u postgres createdb -O myuser mydb

The first command line creates the user with no database creation rights
(-D) with no add user rights -A) and will prompt you for entering a
password (-P). The second command line create the database 'mydb with
'myuser' as owner.

## restarting the server

    sudo /etc/init.d/postgresql-8.3 restart

## Troubleshooting

If you’re receiving the error:

FATAL C28000 MIDENT authentication failed for user "todo" Fauth.c L395
Rauth_failed it is due to Rails connecting to PostgreSQL via TCP socket,
not UNIX socket, so in the pg_hba.conf you need to setup a “host” line,
not a “local” line.

So, something like:

      host all all 127.0.0.1 255.255.255.255 password
or
    host all all 127.0.0.1 255.255.255.255 trust

Also make sure that your PostgreSQL is listening to TCP/IP requests. If
you are starting PostgreSQL via pg_ctl simply add ‘-o -i’ to the end of
the line. On OS X my PostgreSQL start command looks like this:

    /usr/local/pgsql/bin/pg_ctl -D /usr/local/pgsql/data  -l logfile start -o -i

Under a stock Ubuntu install, you will probably encounter either of these errors:
e_sendauth: no password supplied

    fe_sendauth: no password supplied

This is due to the permissions in `pg_hba.conf` being too restrictive by
default. To allow rails to connect, simply change the bottom of
pg_hba.conf to look like this.

    # TYPE  DATABASE    USER        CIDR-ADDRESS          METHOD

    # "local" is for Unix domain socket connections only
    local   all         all                               trust
    # IPv4 local connections:
    host    all         all         127.0.0.1/32          trust
    # IPv6 local connections:
    host    all         all         ::1/128               trust
    ## LINKS

## Setup
<http://oldwiki.rubyonrails.org/rails/pages/PostgreSQL>

## Concurrency:
<http://devcenter.heroku.com/articles/postgresql-concurrency>
